// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/gocrane/api/analysis/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RecommendationRuleLister helps list RecommendationRules.
// All objects returned here must be treated as read-only.
type RecommendationRuleLister interface {
	// List lists all RecommendationRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RecommendationRule, err error)
	// Get retrieves the RecommendationRule from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RecommendationRule, error)
	RecommendationRuleListerExpansion
}

// recommendationRuleLister implements the RecommendationRuleLister interface.
type recommendationRuleLister struct {
	indexer cache.Indexer
}

// NewRecommendationRuleLister returns a new RecommendationRuleLister.
func NewRecommendationRuleLister(indexer cache.Indexer) RecommendationRuleLister {
	return &recommendationRuleLister{indexer: indexer}
}

// List lists all RecommendationRules in the indexer.
func (s *recommendationRuleLister) List(selector labels.Selector) (ret []*v1alpha1.RecommendationRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RecommendationRule))
	})
	return ret, err
}

// Get retrieves the RecommendationRule from the index for a given name.
func (s *recommendationRuleLister) Get(name string) (*v1alpha1.RecommendationRule, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("recommendationrule"), name)
	}
	return obj.(*v1alpha1.RecommendationRule), nil
}
